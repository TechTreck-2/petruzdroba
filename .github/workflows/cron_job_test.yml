name: Cron Job Test

on:
  schedule:
    - cron: '0 3 * * *'  # 3AM UTC
  workflow_dispatch:

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Prepare test results file
      run: |
        FILE="test_results.txt"
        touch "$FILE"
        DATE_LINE=$(date '+%Y-%m-%d %H:%M:%S')
        TMPFILE=$(mktemp)
        echo "$DATE_LINE" > "$TMPFILE"
        cat "$FILE" >> "$TMPFILE"
        mv "$TMPFILE" "$FILE"


  frontend-tests:
    needs: init
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Setup environment
        env:
          apiUrl: ${{ secrets.apiUrl }}
        run: |
          cd techtreck-learning
          mkdir -p src/environments
          echo 'export const environment = { production: false, apiUrl: "'$apiUrl'" };' > src/environments/environment.ts
      - run: |
          cd techtreck-learning
          npm ci
          npm install cypress --save-dev
      - run: |
          cd techtreck-learning
          npm run test:ci | grep TOTAL: | tail -n 1 | sed 's/\x1B\[[0-9;]*[mK]//g' >> ../test_summary.txt
      - run: |
          cd techtreck-learning
          npm run test:e2e

  backend-tests:
    needs: init
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: |
          cd techtreck-learning/backend
          pip install -r requirements.txt
      - env:
          AZURE_DOMAIN: "https://dummy-azure-app.azurewebsites.net,https://dummy-frontend.netlify.app"
          DJANGO_ALLOWED_HOSTS: "dummy-frontend.netlify.app,localhost,dummy-azure-app.azurewebsites.net"
          DJANGO_CORS_ALLOWED_ORIGINS: "https://dummy-frontend.netlify.app"
          DJANGO_DEBUG: "False"
          DJANGO_SECRET_KEY: "dummysecretkey1234567890"
        run: |
          cd techtreck-learning/backend
          python manage.py test 2>&1 | tee test_output.log ; ran=$(grep -Eo 'Ran [0-9]+ tests' test_output.log | tail -n1 | grep -Eo '[0-9]+') ; fails=$(grep -Eo 'failures=[0-9]+' test_output.log | tail -n1 | cut -d= -f2) ; [ -z "$fails" ] && fails=0 ; [ -z "$ran" ] && ran=0 ; success=$((ran - fails)) ; echo "TOTAL: $ran SUCCESS: $success FAILED: $fails" >> ../test_summary.txt
